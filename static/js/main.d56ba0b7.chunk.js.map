{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","firstColorInput","setFirstColorInput","secondColorInput","setSecondColorInput","displayFirstColorPicker","setDisplayFirstColorPicker","displaySecondColorPicker","setDisplaySecondColorPicker","gradientSelected","setGradientSelected","degSlider","setDegSlider","mode","setMode","gradientChoice","showColorPicker","display","hideColorPicker","degSliderToggle","className","style","background","id","class","type","onChange","e","target","value","console","log","placeholder","src","alt","onClick","prevValue","color","hex","Button","variant","min","max","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d56ba0b7.chunk.js","sourcesContent":["import \"./App.scss\"\nimport React, { useState } from \"react\"\nimport { ChromePicker } from \"react-color\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nfunction App() {\n  const [firstColorInput, setFirstColorInput] = useState(\"\")\n  const [secondColorInput, setSecondColorInput] = useState(\"\")\n  const [displayFirstColorPicker, setDisplayFirstColorPicker] = useState(false)\n  const [displaySecondColorPicker, setDisplaySecondColorPicker] = useState(\n    false\n  )\n  const [gradientSelected, setGradientSelected] = useState(\"linear\")\n\n  const [degSlider, setDegSlider] = useState(\"90\")\n\n  const [mode, setMode] = useState(\"single\")\n\n  const handlefirstColorChange = (e) => {\n    setFirstColorInput(e.target.value)\n    console.log(firstColorInput)\n  }\n\n  const handlesecondColorChange = (e) => {\n    setSecondColorInput(e.target.value)\n    console.log(secondColorInput)\n  }\n\n  const handleDegSlider = (e) => {\n    setDegSlider(e.target.value)\n  }\n\n  const handleFirstColorPicker = (color) => {\n    setFirstColorInput(color.hex)\n  }\n\n  const handleSecondColorPicker = (color) => {\n    setSecondColorInput(color.hex)\n  }\n\n  const handleFirstColorPickerImage = (e) => {\n    setDisplayFirstColorPicker((prevValue) => !prevValue)\n    setDisplaySecondColorPicker(false)\n  }\n\n  const handleSecondColorPickerImage = () => {\n    setDisplaySecondColorPicker((prevValue) => !prevValue)\n    setDisplayFirstColorPicker(false)\n  }\n\n  const handleLinearSelector = () => {\n    setGradientSelected(\"linear\")\n  }\n\n  const handleRadialSelector = () => {\n    setGradientSelected(\"radial\")\n  }\n\n  const gradientChoice =\n    gradientSelected === \"linear\"\n      ? `linear-gradient(${degSlider}deg, ${firstColorInput}, ${secondColorInput})`\n      : `radial-gradient(circle, ${firstColorInput}, ${secondColorInput})`\n  const showColorPicker = {\n    display: \"block\",\n  }\n\n  const hideColorPicker = {\n    display: \"none\",\n  }\n\n  const swapColours = () => {\n    setFirstColorInput(secondColorInput)\n    setSecondColorInput(firstColorInput)\n  }\n\n  const degSliderToggle = {\n    display:\n      mode === \"single\" || gradientSelected === \"radial\" ? \"none\" : \"block\",\n  }\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        background: mode === \"single\" ? firstColorInput : gradientChoice,\n      }}\n    >\n      <div className=\"container\">\n        <div id=\"sourcecode\">\n          <p>Source Code:</p>\n          <p className=\"code\">\n            {mode === \"single\"\n              ? `background: ${firstColorInput}`\n              : `background: ${gradientChoice}`}\n          </p>\n        </div>\n        <div id=\"colour_picker\">\n          <div class=\"firstInput inputSection\">\n            <input\n              type=\"text\"\n              onChange={handlefirstColorChange}\n              value={firstColorInput}\n              id=\"input_first\"\n              placeholder={\n                mode === \"single\"\n                  ? \"Enter color name or code\"\n                  : \"Enter First Colour\"\n              }\n              className=\"inputs\"\n            />\n            <img\n              src=\"images/colorpicker.png\"\n              alt=\"\"\n              onClick={handleFirstColorPickerImage}\n            />\n            <div\n              class=\"firstColorPicker\"\n              style={\n                displayFirstColorPicker ? showColorPicker : hideColorPicker\n              }\n            >\n              <ChromePicker\n                color={firstColorInput}\n                onChange={handleFirstColorPicker}\n              />\n            </div>\n          </div>\n          <div class=\"secondInput inputSection\">\n            <input\n              type=\"text\"\n              onChange={handlesecondColorChange}\n              value={secondColorInput}\n              style={{ display: mode === \"single\" ? \"none\" : \"block\" }}\n              id=\"input_second\"\n              placeholder={mode === \"single\" ? \"\" : \"Enter Second Colour\"}\n              className=\"inputs\"\n            />\n            <img\n              src=\"images/colorpicker.png\"\n              alt=\"\"\n              style={{ display: mode === \"single\" ? \"none\" : \"block\" }}\n              onClick={handleSecondColorPickerImage}\n            />\n            <div\n              class=\"secondColorPicker\"\n              style={\n                displaySecondColorPicker ? showColorPicker : hideColorPicker\n              }\n            >\n              <ChromePicker\n                color={secondColorInput}\n                onChange={handleSecondColorPicker}\n              />\n            </div>\n          </div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setMode(mode === \"single\" ? \"gradient\" : \"single\")}\n          >\n            {mode === \"single\" ? \"Single Colour\" : \"Gradient\"}\n          </Button>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"360\"\n            defaultValue=\"90\"\n            onChange={handleDegSlider}\n            style={degSliderToggle}\n            id=\"input_degSlider\"\n          />\n          <p\n            style={{\n              display:\n                mode === \"single\" || gradientSelected === \"radial\"\n                  ? \"none\"\n                  : \"block\",\n            }}\n          >\n            {degSlider}deg\n          </p>\n          <div\n            class=\"gradientButtons\"\n            style={{ display: mode === \"single\" ? \"none\" : \"block\" }}\n          >\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleLinearSelector}\n              className=\"doubleBtn_1\"\n            >\n              Linear\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleRadialSelector}\n              className=\"doubleBtn_2\"\n            >\n              Radial\n            </Button>\n          </div>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={swapColours}\n            style={{ display: mode === \"single\" ? \"none\" : \"block\" }}\n          >\n            Swap Colours\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}